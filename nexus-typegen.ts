/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  DebtorInputType: { // input type
    amount: number; // Float!
    personId: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Debtor: { // root type
    amount: number; // Float!
    person: NexusGenRootTypes['Person']; // Person!
  }
  Error: { // root type
    errorMessage: string; // String!
  }
  Expense: { // root type
    debtors: NexusGenRootTypes['Debtor'][]; // [Debtor!]!
    id: string; // String!
    name: string; // String!
    payer: NexusGenRootTypes['Person']; // Person!
    timestamp: string; // String!
    totalAmount: number; // Float!
  }
  Expenses: { // root type
    expenses: NexusGenRootTypes['Expense'][]; // [Expense!]!
  }
  Mutation: {};
  OfflinePerson: { // root type
    id: string; // String!
    name: string; // String!
  }
  Query: {};
  RegisterValidationError: { // root type
    emailErrorMessage?: string | null; // String
    passwordErrorMessage?: string | null; // String
    usernameErrorMessage?: string | null; // String
  }
  User: { // root type
    email: string; // String!
    id: string; // String!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  AuthResult: NexusGenRootTypes['AuthPayload'] | NexusGenRootTypes['Error'];
  ExpenseResult: NexusGenRootTypes['Error'] | NexusGenRootTypes['Expense'];
  ExpensesResult: NexusGenRootTypes['Error'] | NexusGenRootTypes['Expenses'];
  Person: NexusGenRootTypes['OfflinePerson'] | NexusGenRootTypes['User'];
  UserResult: NexusGenRootTypes['Error'] | NexusGenRootTypes['User'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Debtor: { // field return type
    amount: number; // Float!
    person: NexusGenRootTypes['Person']; // Person!
  }
  Error: { // field return type
    errorMessage: string; // String!
  }
  Expense: { // field return type
    debtors: NexusGenRootTypes['Debtor'][]; // [Debtor!]!
    id: string; // String!
    name: string; // String!
    payer: NexusGenRootTypes['Person']; // Person!
    timestamp: string; // String!
    totalAmount: number; // Float!
  }
  Expenses: { // field return type
    expenses: NexusGenRootTypes['Expense'][]; // [Expense!]!
  }
  Mutation: { // field return type
    createExpense: NexusGenRootTypes['ExpenseResult']; // ExpenseResult!
    login: NexusGenRootTypes['AuthResult']; // AuthResult!
    register: NexusGenRootTypes['AuthResult']; // AuthResult!
  }
  OfflinePerson: { // field return type
    id: string; // String!
    name: string; // String!
  }
  Query: { // field return type
    currentUser: NexusGenRootTypes['UserResult'] | null; // UserResult
    getAllExpenses: NexusGenRootTypes['ExpensesResult']; // ExpensesResult!
  }
  RegisterValidationError: { // field return type
    emailErrorMessage: string | null; // String
    passwordErrorMessage: string | null; // String
    usernameErrorMessage: string | null; // String
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Debtor: { // field return type name
    amount: 'Float'
    person: 'Person'
  }
  Error: { // field return type name
    errorMessage: 'String'
  }
  Expense: { // field return type name
    debtors: 'Debtor'
    id: 'String'
    name: 'String'
    payer: 'Person'
    timestamp: 'String'
    totalAmount: 'Float'
  }
  Expenses: { // field return type name
    expenses: 'Expense'
  }
  Mutation: { // field return type name
    createExpense: 'ExpenseResult'
    login: 'AuthResult'
    register: 'AuthResult'
  }
  OfflinePerson: { // field return type name
    id: 'String'
    name: 'String'
  }
  Query: { // field return type name
    currentUser: 'UserResult'
    getAllExpenses: 'ExpensesResult'
  }
  RegisterValidationError: { // field return type name
    emailErrorMessage: 'String'
    passwordErrorMessage: 'String'
    usernameErrorMessage: 'String'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createExpense: { // args
      debtors: NexusGenInputs['DebtorInputType'][]; // [DebtorInputType!]!
      name: string; // String!
      payerId: string; // String!
      totalAmount: number; // Float!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      email: string; // String!
      password: string; // String!
      username: string; // String!
    }
  }
  Query: {
    getAllExpenses: { // args
      personId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  AuthResult: "AuthPayload" | "Error"
  ExpenseResult: "Error" | "Expense"
  ExpensesResult: "Error" | "Expenses"
  Person: "OfflinePerson" | "User"
  UserResult: "Error" | "User"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "AuthResult" | "ExpenseResult" | "ExpensesResult" | "Person" | "UserResult";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}